library(xgboost)
library(dplyr)

impute_xgboost <- function(data, verbose = TRUE) {
  df <- data
  
  if (verbose) cat("üßπ Preprocessing: Dropping problematic columns...\n")
  drop_cols <- c()
  
  for (col in names(df)) {
    col_vals <- df[[col]]
    total_n <- length(col_vals)
    na_n <- sum(is.na(col_vals))
    non_na_vals <- na.omit(col_vals)
    
    if (na_n == total_n) {
      if (verbose) cat("‚ùå Dropping", col, "- all NA\n")
      drop_cols <- c(drop_cols, col)
    } else if (length(unique(non_na_vals)) == 1 && na_n > 0) {
      if (verbose) cat("‚ùå Dropping", col, "- only one unique non-NA value\n")
      drop_cols <- c(drop_cols, col)
    } else if ((na_n / total_n) > 0.5) {
      if (verbose) cat("‚ùå Dropping", col, sprintf("- %.1f%% missing\n", 100 * na_n / total_n))
      drop_cols <- c(drop_cols, col)
    }
  }
  
  df <- df[, !(names(df) %in% drop_cols)]
  
  factorize_column <- function(x, ref = NULL) {
    x <- as.character(x)
    all_levels <- if (is.null(ref)) unique(x[!is.na(x)]) else union(unique(x[!is.na(x)]), unique(ref[!is.na(ref)]))
    as.integer(factor(x, levels = all_levels))
  }
  
  for (col in names(df)) {
    if (anyNA(df[[col]])) {
      if (verbose) cat("\nüîß Imputing:", col, "\n")
      target <- df[[col]]
      not_na_idx <- which(!is.na(target))
      na_idx <- which(is.na(target))
      
      y <- target[not_na_idx]
      X <- df[not_na_idx, setdiff(names(df), col)]
      X_missing <- df[na_idx, setdiff(names(df), col)]
      
      # Convert categorical variables
      for (cname in names(X)) {
        if (is.character(X[[cname]]) || is.factor(X[[cname]]) ||
            is.character(X_missing[[cname]]) || is.factor(X_missing[[cname]])) {
          levels_union <- unique(c(as.character(X[[cname]]), as.character(X_missing[[cname]])))
          X[[cname]] <- as.integer(factor(X[[cname]], levels = levels_union))
          X_missing[[cname]] <- as.integer(factor(X_missing[[cname]], levels = levels_union))
        }
      }
      
      # Remove rows with NA in predictors
      X <- na.omit(X)
      y <- y[as.numeric(rownames(X))]
      
      if (length(y) == 0 || nrow(X) == 0 || nrow(X_missing) == 0) {
        if (verbose) cat("‚ö†Ô∏è Skipping", col, "- insufficient data\n")
        next
      }
      
      X_matrix <- as.matrix(data.frame(lapply(X, as.numeric)))
      X_missing_matrix <- as.matrix(data.frame(lapply(X_missing, as.numeric)))
      
      # Train and predict
      if (is.numeric(y)) {
        model <- xgboost(data = X_matrix, label = y,
                         objective = "reg:squarederror",
                         nrounds = 50, verbose = 0)
        preds <- predict(model, X_missing_matrix)
      } else {
        y <- as.factor(y)
        model <- xgboost(data = X_matrix, label = as.numeric(y) - 1,
                         objective = "multi:softmax",
                         num_class = length(levels(y)),
                         nrounds = 50, verbose = 0)
        pred_idx <- predict(model, X_missing_matrix)
        preds <- levels(y)[pred_idx + 1]
      }
      
      df[[col]][na_idx] <- preds
    }
  }
  
  return(df)
}
